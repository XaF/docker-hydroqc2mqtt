name: Build and push

on:
  workflow_dispatch:
    inputs:
      force-build:
        type: boolean
        description: Force build (even if registry already up to date)
  push:
    branches:
      - main
  schedule:
    - cron: '12 23 * * *'

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  REGISTRY_USERNAME: thexaf
  IMAGE_NAME: ${{ github.repository }}
  REMOTE_REPOSITORY: https://gitlab.com/hydroqc/hydroqc2mqtt

jobs:
  prepare-environment:
    name: Prepare environment
    runs-on: ubuntu-latest

    outputs:
      image_name: ${{ env.IMAGE_NAME }}
      version: ${{ env.VERSION }}
      build: ${{ env.BUILD }}

    permissions:
      actions: read

    steps:
      - name: Prepare image name
        run: |
          # Prepare image name
          IMAGE_NAME=$(echo "${{ env.IMAGE_NAME }}" | sed 's@/docker-@/@g')
          IMAGE_NAME="${{ env.REGISTRY_USERNAME }}/${IMAGE_NAME#*/}"
          echo "IMAGE_NAME=${IMAGE_NAME}" | tee -a "$GITHUB_ENV"

      - name: Find version to build
        run: |
          git init >/dev/null 2>&1
          git remote add source "${{ env.REMOTE_REPOSITORY }}" >/dev/null 2>&1
          VERSION=$(git -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' --tags source '*.*.*' | tail --lines=1 | cut --delimiter='/' --fields=3)

          if [ -z "$VERSION" ]; then
            echo "Unable to find version"
            exit 1
          fi

          echo "VERSION=${VERSION}" | tee -a "$GITHUB_ENV"

      - name: Check if version already has been built in the last month
        run: |
          BUILD='true'
          if [ "${{ github.event.inputs.force-build }}" != "true" ]; then
            VERSION_DATETIME=$(curl -s https://registry.hub.docker.com/v2/repositories/${{ env.IMAGE_NAME }}/tags | \
              jq -r '.results | map(select(.name == "${{ env.VERSION }}")) | map(.tag_last_pushed) | .[]')

            if [ -n "$VERSION_DATETIME" ]; then
              echo "Version was previously pushed at ${VERSION_DATETIME}"

              EXPIRE_AFTER=$((60 * 60 * 24 * 30))
              VERSION_TIMESTAMP=$(date -d "${VERSION_DATETIME}" +%s)
              NOW_TIMESTAMP=$(date +%s)

              if [ $(($NOW_TIMESTAMP - $VERSION_TIMESTAMP)) -le $EXPIRE_AFTER ]; then
                BUILD='false'
              fi
            fi
          fi

          echo "BUILD=${BUILD}" | tee -a "$GITHUB_ENV"

      - name: Skip scheduled work if last build has not succeeded
        if: github.event_name == 'schedule' && env.BUILD == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LAST_RUN_SUCCEEDED=$(\
            curl -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs" 2>/dev/null | \
            jq '.workflow_runs |
                map(select(.name == "${{ github.workflow }}" and .head_branch == "main")) |
                first |
                .conclusion == "success"'
          )

          if [ "$LAST_RUN_SUCCEEDED" != "true" ]; then
            echo "Skipping build as last run has not succeeded"
            echo "BUILD=false" | tee -a "$GITHUB_ENV"
          fi

  build-and-push:
    name: Build and push
    runs-on: ubuntu-latest

    needs:
      - prepare-environment

    if: needs.prepare-environment.outputs.build == 'true'

    permissions:
      contents: read
      packages: write

    env:
      IMAGE_NAME: ${{ needs.prepare-environment.outputs.image_name }}
      VERSION: ${{ needs.prepare-environment.outputs.version }}

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v3

      - name: Checkout version from source
        run: |
          git remote add source "${{ env.REMOTE_REPOSITORY }}"
          git fetch source refs/tags/${{ env.VERSION }}:refs/tags/${{ env.VERSION }}
          git checkout ${{ env.VERSION }}

          # Override Dockerfile
          git show main:Dockerfile > Dockerfile

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          flavor: |
            latest=true
          tags: |
            type=semver,pattern={{version}},value=${{ env.VERSION }}
            type=semver,pattern={{major}}.{{minor}},value=${{ env.VERSION }}
            type=semver,pattern={{major}},value=${{ env.VERSION }}
          images: ${{ env.IMAGE_NAME }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          platforms: |
            linux/arm64
            linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: HYDROQC2MQTT_VERSION=${{ env.VERSION }}
